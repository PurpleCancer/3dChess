#version 130

struct material_t {
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
    float shininess;
};

struct light_t {
    vec3 position;
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
};

struct spotlight_t {
    vec3 position;
    vec3 direction;
    float cutOff;
    float outerCutOff;

    float constant;
    float linear;
    float quadratic;

    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
};

out vec4 pixelColor;

in vec3 Normal;
in vec3 FragmentPosition;
in vec2 Texcoord;

uniform vec3 light1Position;
uniform vec3 cameraPosition;
uniform material_t material;
uniform light_t light1;
uniform spotlight_t spotLight;
uniform sampler2D ourTexture;

vec3 calcLight(light_t light, vec3 normal, vec3 viewDir);
vec3 calcSpotLight(spotlight_t light, vec3 normal, vec3 fragPos, vec3 viewDir);

void main()
{
    vec3 norm = normalize(Normal);
    vec3 viewDirection = normalize(cameraPosition - FragmentPosition);

    vec3 result = calcLight(light1, norm, viewDirection);

    result += calcSpotLight(spotLight, norm, FragmentPosition, viewDirection);

    pixelColor = vec4(result, 1.0);



}

// Calculates the color when using a directional light.
vec3 calcLight(light_t light, vec3 norm, vec3 viewDirection)
{
    //Ambient
    //vec3 ambient = light.ambient * material.ambient;
    vec3 ambient = light.ambient * vec3(texture(ourTexture, Texcoord));

    //Diffuse
    vec3 lightDirection = normalize(light.position - FragmentPosition);
    float diff = max(dot(norm, lightDirection), 0.0);
    vec3 diffuse = light.diffuse * (diff * vec3(texture(ourTexture, Texcoord)));

    //Specular
    vec3 reflectDirection = reflect(-lightDirection, norm);
    float spec = pow(max(dot(viewDirection, reflectDirection), 0.0), material.shininess);
    vec3 specular = light.specular * (spec * material.specular);

    return (ambient + diffuse + specular);
}

// Calculates the color when using a spot light.
vec3 calcSpotLight(spotlight_t light, vec3 normal, vec3 fragPos, vec3 viewDir)
{
    vec3 lightDir = normalize(light.position - fragPos);
    // Diffuse shading
    float diff = max(dot(normal, lightDir), 0.0);
    // Specular shading
    vec3 reflectDir = reflect(-lightDir, normal);
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
    // Attenuation
    float distance = length(light.position - fragPos);
    float attenuation = 1.0f / (light.constant + light.linear * distance + light.quadratic * (distance * distance));
    // Spotlight intensity
    float theta = dot(lightDir, normalize(-light.direction));
    float epsilon = light.cutOff - light.outerCutOff;
    float intensity = clamp((theta - light.outerCutOff) / epsilon, 0.0, 1.0);
    // Combine results
    vec3 ambient = light.ambient * vec3(texture(ourTexture, Texcoord));
    vec3 diffuse = light.diffuse * diff * vec3(texture(ourTexture, Texcoord));
    vec3 specular = light.specular * spec * vec3(texture(ourTexture, Texcoord));
    ambient *= attenuation * intensity;
    diffuse *= attenuation * intensity;
    specular *= attenuation * intensity;
    return (ambient + diffuse + specular);
}