#version 130

struct material_t {
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
    float shininess;
};

struct light_t {
    vec3 position;
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
};

out vec4 pixelColor;

in vec3 Normal;
in vec3 FragmentPosition;
in vec2 Texcoord;

uniform vec3 light1Position;
uniform vec3 cameraPosition;
uniform material_t material;
uniform light_t light1;
uniform sampler2D ourTexture;

void main()
{
    vec3 norm = normalize(Normal);

    //Ambient
    //vec3 ambient = light1.ambient * material.ambient;
    vec3 ambient = light1.ambient * vec3(texture(ourTexture, Texcoord));


    //Diffuse
    vec3 lightDirection = normalize(light1.position - FragmentPosition);
    float diff = max(dot(norm, lightDirection), 0.0);
    //vec3 diffuse = light1.diffuse * (diff * material.diffuse);
    vec3 diffuse = light1.diffuse * (diff * vec3(texture(ourTexture, Texcoord)));


    //Specular
    vec3 viewDirection = normalize(cameraPosition - FragmentPosition);
    vec3 reflectDirection = reflect(-lightDirection, norm);
    float spec = pow(max(dot(viewDirection, reflectDirection), 0.0), material.shininess);
    vec3 specular = light1.specular * (spec * material.specular);


    vec3 result = (ambient + diffuse + specular);
    pixelColor = vec4(result, 1.0f);

    //pixelColor=vec4(ambient,1.0f);
}  